var documenterSearchIndex = {"docs":
[{"location":"reopt/methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"reopt/methods/","page":"Methods","title":"Methods","text":"run_reopt\nbuild_reopt!(m::JuMP.AbstractModel, fp::String)\nScenario(d::Dict)","category":"page"},{"location":"reopt/methods/#REoptLite.run_reopt","page":"Methods","title":"REoptLite.run_reopt","text":"run_reopt(m::JuMP.AbstractModel, fp::String)\n\nSolve the model using the Scenario defined in JSON file stored at the file path fp.\n\n\n\n\n\nrun_reopt(m::JuMP.AbstractModel, d::Dict)\n\nSolve the model using the Scenario defined in dict d.\n\n\n\n\n\n","category":"function"},{"location":"reopt/methods/#REoptLite.build_reopt!-Tuple{AbstractModel, String}","page":"Methods","title":"REoptLite.build_reopt!","text":"build_reopt!(m::JuMP.AbstractModel, fp::String)\n\nAdd variables and constraints for REopt model.  fp is used to load in JSON file to construct REoptInputs.\n\n\n\n\n\n","category":"method"},{"location":"reopt/methods/#REoptLite.Scenario-Tuple{Dict}","page":"Methods","title":"REoptLite.Scenario","text":"Scenario(d::Dict)\n\nConstructor for Scenario struct, where d has upper-case keys:\n\nSite (required)\nElectricTariff (required)\nElectricLoad (required)\nPV (optional, can be Array)\nStorage (optional)\nElectricUtility (optional)\nFinancial (optional)\nGenerator (optional)\n\nAll values of d are expected to be Dicts except for PV, which can be either a Dict or Dict[].\n\nstruct Scenario\n    settings::Settings\n    site::Site\n    pvs::Array{PV, 1}\n    storage::Storage\n    electric_tariff::ElectricTariff\n    electric_load::ElectricLoad\n    electric_utility::ElectricUtility\n    financial::Financial\n    generator::Generator\nend\n\n\n\n\n\n","category":"method"},{"location":"mpc/examples/#MPC-Examples","page":"MPC Examples","title":"MPC Examples","text":"","category":"section"},{"location":"mpc/examples/","page":"MPC Examples","title":"MPC Examples","text":"The MPC capability provided by REoptLite is essentially the optimal sizing and dispatch capability that REoptLite is commonly used for, but with the sizing problem removed. Also, the MPC model can be built for an arbitrary time length, or \"horizon\" (whereas a REoptLite model always includes an entire calendar year). The MPC model also requires the user to provide load and resource forecasts as inputs (whereas the typical REoptLite model allows one to use built-in load profiles as well as other API's such as PVWatts for the solar resource).","category":"page"},{"location":"mpc/examples/","page":"MPC Examples","title":"MPC Examples","text":"using REoptLite, JuMP, Cbc\nmodel = Model(Cbc.Optimizer)\nresults = run_mpc(model, \"./test/scenarios/mpc.json\")","category":"page"},{"location":"mpc/examples/","page":"MPC Examples","title":"MPC Examples","text":"See mpc.json for details on the Scenario.","category":"page"},{"location":"reopt/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"To use REopt Lite you will need to have a solver installed. REoptLite.jl has been tested with Xpress, Cbc, and CPLEX solvers, but it should work with other Linear Progam solvers (for PV and Storage scenarios) or Mixed Integer Linear Program solvers (for scenarios with outages and/or Generators).","category":"page"},{"location":"reopt/examples/#Basic","page":"Examples","title":"Basic","text":"","category":"section"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"using REoptLite, JuMP, Cbc\n\nm = Model(Cbc.Optimizer)\nresults = run_reopt(m, \"test/scenarios/pv_storage.json\")","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"See pv_storage.json for details on the Scenario.","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"For more on the scenario.json see the REopt Inputs section.","category":"page"},{"location":"reopt/examples/#Advanced","page":"Examples","title":"Advanced","text":"","category":"section"},{"location":"reopt/examples/#Manipulating-Inputs","page":"Examples","title":"Manipulating Inputs","text":"","category":"section"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"A scenario.json goes through two conversion steps before the data is passed to the JuMP model:","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"Conversion to a Scenario struct\nConverstion to a REoptInputs struct","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"REoptInputs captures all the data arrays and sets necessary to build the JuMP model, and it can be manually modified before building the model:","category":"page"},{"location":"reopt/examples/","page":"Examples","title":"Examples","text":"using Xpress\nusing JuMP\nusing REoptLite\n\nm = Model(Xpress.Optimizer)\n\ninputs = REoptInputs(\"path/to/scenario.json\")\n# ... modify the inputs ...\nresults = run_reopt(m, inputs)","category":"page"},{"location":"mpc/inputs/#MPC-Inputs","page":"MPC Inputs","title":"MPC Inputs","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"The input structure for MPC models is very similar to the structure for REopt Inputs. The primary differences are ","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"The MPCElectricTariff requires specifying individual rate components (and does not parse URDB rates like ElectricTariff).\nThe capacities of any provided DER must be provided\nThe load profile for each time step must be provided","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"Just like REopt Inputs, inputs to run_mpc can be provided in one of three formats:","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"a file path (string) to a JSON file,\na Dict, or\nusing the MPCInputs struct","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"The accepted keys for the JSON file or Dict are:","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"ElectricLoad\nElectricTariff\nPV\nStorage\nFinancial\nGenerator\nElectricUtility\nSettings","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"The simplest scenario does not have any dispatch optimization and is essentially a cost \"calculator:","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"{\n    \"ElectricLoad\": {\n        \"loads_kw\": [10.0, 11.0, 12.0]\n    },\n    \"ElectricTariff\": {\n        \"energy_rates\": [0.1, 0.2, 0.3]\n    }\n}","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"note: Note\nThe ElectricLoad.loads_kw can have an arbitrary length, but its length must be the same lengths as many other inputs such as the MPCElectricTariff.energy_rates and the PV.prod_factor_series_kw.","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"Here is a more complex MPCScenario, which is used in MPC Examples:","category":"page"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"{\n    \"PV\": {\n        \"size_kw\": 150,\n        \"prod_factor_series_kw\": [\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.05,\n            0.10,\n            0.15,\n            0.30,\n            0.6,\n            0.5,\n            0.3,\n            0.02,\n            0.01,\n            0.005,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0\n        ]\n    },\n    \"Storage\": {\n        \"size_kw\": 30.0,\n        \"size_kwh\": 60.0,\n        \"can_grid_charge\": true\n    },\n    \"ElectricLoad\": {\n        \"loads_kw\": [\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100,\n            100\n        ]\n    },\n    \"ElectricTariff\": {\n        \"energy_rates\": [\n            0.1,\n            0.1,\n            0.1,\n            0.1,\n            0.1,\n            0.1,\n            0.15,\n            0.15,\n            0.15,\n            0.15,\n            0.15,\n            0.15,\n            0.15,\n            0.2,\n            0.2,\n            0.2,\n            0.3,\n            0.2,\n            0.2,\n            0.2,\n            0.1,\n            0.1,\n            0.1,\n            0.1\n        ],\n        \"monthly_demand_rates\": [10.0],\n        \"monthly_previous_peak_demands\": [98.0],\n        \"tou_demand_rates\": [0.0, 15.0],\n        \"tou_demand_timesteps\": [\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], \n            [16, 17, 18, 19, 20, 21, 22, 23, 24]\n        ],\n        \"tou_previous_peak_demands\": [98.0, 97.0],\n        \"net_metering\": false,\n        \"export_rates\": [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, \n            0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05]\n    }\n}","category":"page"},{"location":"mpc/inputs/#MPC-Input-Structures","page":"MPC Inputs","title":"MPC Input Structures","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"Note that the keys of the input Dict or JSON file do not need the MPC prefix. ","category":"page"},{"location":"mpc/inputs/#MPCElectricTariff","page":"MPC Inputs","title":"MPCElectricTariff","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"REoptLite.MPCElectricTariff(d::Dict)","category":"page"},{"location":"mpc/inputs/#REoptLite.MPCElectricTariff-Tuple{Dict}","page":"MPC Inputs","title":"REoptLite.MPCElectricTariff","text":"MPCElectricTariff(d::Dict)\n\nfunction for parsing user inputs into \n\n    struct MPCElectricTariff\n        monthly_previous_peak_demands::Array{Float64,1}\n        energy_rates::Array{Float64,1} \n\n        monthly_demand_rates::Array{Float64,1}\n        time_steps_monthly::Array{Array{Int64,1},1}  # length = 0 or 12\n\n        tou_demand_rates::Array{Float64,1}\n        tou_demand_ratchet_timesteps::Array{Array{Int64,1},1}  # length = n_tou_demand_ratchets\n        tou_previous_peak_demands::Array{Float64,1}\n\n        fixed_monthly_charge::Float64\n        annual_min_charge::Float64\n        min_monthly_charge::Float64\n\n        export_rates::DenseAxisArray{Array{Float64,1}}\n        export_bins::Array{Symbol,1}\n    end\n\nKeys for d include:\n\nenergy_rates\nREQUIRED\nmust have length equal to ElectricLoad.loads_kw\nmonthly_demand_rates\ndefault = [0]\ntime_steps_monthly\narray of arrays for integer time steps that the monthly_demand_rates apply to\ndefault = [collect(1:length(energy_rates))]\nmonthly_previous_peak_demands\ndefault = [0]\ntou_demand_rates\nan array of time-of-use demand rates\nmust have length equal to tou_demand_timesteps\ndefault = []\ntou_demand_timesteps\nan array of arrays for the integer time steps that apply to the tou_demand_rates\ndefault = []\ntou_previous_peak_demands\nan array of the previous peak demands set in each time-of-use demand period\nmust have length equal to tou_demand_timesteps\ndefault = []\nnet_metering\nboolean, if true then customer DER export is compensated at the energy_rates\nexport_rates\ncan be a <:Real or Array{<:Real, 1}, or not provided\nif provided, customer DER export is compensated at the export_rates\n\nNOTE: if both net_metering=true and export_rates are provided then the model can choose from either option.\n\n\n\n\n\n","category":"method"},{"location":"mpc/inputs/#MPCElectricLoad","page":"MPC Inputs","title":"MPCElectricLoad","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"REoptLite.MPCElectricLoad","category":"page"},{"location":"mpc/inputs/#REoptLite.MPCElectricLoad","page":"MPC Inputs","title":"REoptLite.MPCElectricLoad","text":"MPCElectricLoad\n\nBase.@kwdef struct MPCElectricLoad\n    loads_kw::Array{Real,1}\n    critical_loads_kw::Union{Missing, Array{Real,1}} = missing\nend\n\n\n\n\n\n","category":"type"},{"location":"mpc/inputs/#MPCElecStorage","page":"MPC Inputs","title":"MPCElecStorage","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"REoptLite.MPCElecStorage","category":"page"},{"location":"mpc/inputs/#REoptLite.MPCElecStorage","page":"MPC Inputs","title":"REoptLite.MPCElecStorage","text":"MPCElecStorage\n\nBase.@kwdef struct MPCElecStorage\n    size_kw::Float64\n    size_kwh::Float64\n    charge_efficiency::Float64\n    discharge_efficiency::Float64\n    soc_min_pct::Float64\n    soc_init_pct::Float64\n    can_grid_charge::Bool = true\n    grid_charge_efficiency::Float64\nend\n\n\n\n\n\n","category":"type"},{"location":"mpc/inputs/#MPCFinancial","page":"MPC Inputs","title":"MPCFinancial","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"REoptLite.MPCFinancial","category":"page"},{"location":"mpc/inputs/#REoptLite.MPCFinancial","page":"MPC Inputs","title":"REoptLite.MPCFinancial","text":"MPCFinancial\n\nBase.@kwdef struct MPCFinancial\n    VoLL::Union{Array{R,1}, R} where R<:Real = 1.00\nend\n\n\n\n\n\n","category":"type"},{"location":"mpc/inputs/#MPCPV","page":"MPC Inputs","title":"MPCPV","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"REoptLite.MPCPV","category":"page"},{"location":"mpc/inputs/#REoptLite.MPCPV","page":"MPC Inputs","title":"REoptLite.MPCPV","text":"MPCPV\n\nBase.@kwdef struct MPCPV\n    name::String=\"PV\"\n    size_kw::Real = 0\n    prod_factor_series_kw::Union{Missing, Array{Real,1}} = missing\nend\n\n\n\n\n\n","category":"type"},{"location":"mpc/inputs/#MPCGenerator","page":"MPC Inputs","title":"MPCGenerator","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"REoptLite.MPCGenerator","category":"page"},{"location":"mpc/inputs/#REoptLite.MPCGenerator","page":"MPC Inputs","title":"REoptLite.MPCGenerator","text":"MPCGenerator\n\nstruct with inner constructor:\n\nfunction MPCGenerator(;\n    size_kw::Real,\n    fuel_cost_per_gallon::Float64 = 3.0,\n    fuel_slope_gal_per_kwh::Float64 = 0.076,\n    fuel_intercept_gal_per_hr::Float64 = 0.0,\n    fuel_avail_gal::Float64 = 660.0,\n    min_turn_down_pct::Float64 = 0.0,  # TODO change this to non-zero value\n    only_runs_during_grid_outage::Bool = true,\n    sells_energy_back_to_grid::Bool = false,\n    om_cost_per_kwh::Float64=0.0,\n    )\n\n\n\n\n\n","category":"type"},{"location":"mpc/inputs/#MPCSettings","page":"MPC Inputs","title":"MPCSettings","text":"","category":"section"},{"location":"mpc/inputs/","page":"MPC Inputs","title":"MPC Inputs","text":"The MPCSetting is the same as the Settings.","category":"page"},{"location":"reopt/outputs/#Outputs","page":"Outputs","title":"Outputs","text":"","category":"section"},{"location":"reopt/outputs/#Financial-values","page":"Outputs","title":"Financial values","text":"","category":"section"},{"location":"reopt/outputs/","page":"Outputs","title":"Outputs","text":"REoptLite.add_financial_results","category":"page"},{"location":"reopt/outputs/#REoptLite.add_financial_results","page":"Outputs","title":"REoptLite.add_financial_results","text":"add_financial_results(m::JuMP.AbstractModel, p::REoptInputs, d::Dict; _n=\"\")\n\nAdds the Financial results to the dictionary passed back from run_reopt using the solved model m and the REoptInputs for node _n. Note: the node number is an empty string if evaluating a single Site.\n\nFinancial results:\n\nlcc_us_dollars Optimal lifecycle cost\nnet_capital_costs_plus_om_us_dollars Capital cost for all technologies plus present value of operations and maintenance over anlaysis period\nnet_capital_costs Net capital costs for all technologies, in present value, including replacement costs and incentives.\n\n\n\n\n\n","category":"function"},{"location":"mpc/methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"mpc/methods/","page":"Methods","title":"Methods","text":"run_mpc\nbuild_mpc!","category":"page"},{"location":"mpc/methods/#REoptLite.run_mpc","page":"Methods","title":"REoptLite.run_mpc","text":"run_mpc(m::JuMP.AbstractModel, fp::String)\n\nSolve the model predictive control problem using the MPCScenario defined in the JSON file stored at the file path fp.\n\nReturns a Dict of results with keys matching those in the MPCScenario.\n\n\n\n\n\nrun_mpc(m::JuMP.AbstractModel,  d::Dict)\n\nSolve the model predictive control problem using the MPCScenario defined in the dict d.\n\nReturns a Dict of results with keys matching those in the MPCScenario.\n\n\n\n\n\nrun_mpc(m::JuMP.AbstractModel, p::MPCInputs; obj::Int=2)\n\nSolve the model predictive control problem using the MPCInputs.\n\nReturns a Dict of results with keys matching those in the MPCScenario.\n\n\n\n\n\n","category":"function"},{"location":"mpc/methods/#REoptLite.build_mpc!","page":"Methods","title":"REoptLite.build_mpc!","text":"build_mpc!(m::JuMP.AbstractModel, p::MPCInputs)\n\nAdd variables and constraints for model predictive control model.  Similar to a REopt model but with any length of horizon (instead of one calendar year, and the DER sizes must be provided.\n\n\n\n\n\n","category":"function"},{"location":"#REoptLite.jl","page":"Home","title":"REoptLite.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Renewable Energy Optimization and Integration","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThis package is currently under development and not necessarily stable. It contains a subset of the REopt Lite API capabilities.","category":"page"},{"location":"reopt/inputs/#REopt-Inputs","page":"REopt Inputs","title":"REopt Inputs","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"Inputs to run_reopt can be provided in one of three formats:","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"a file path (string) to a JSON file,\na Dict, or\nusing the REoptInputs struct","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"The first option is perhaps the most straightforward one. For example, the minimum requirements for a JSON scenario file would look like:","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"{\n    \"Site\": {\n        \"longitude\": -118.1164613,\n        \"latitude\": 34.5794343\n    },\n    \"ElectricLoad\": {\n        \"doe_reference_name\": \"MidriseApartment\",\n        \"annual_kwh\": 1000000.0,\n        \"city\": \"Boulder\"\n    },\n    \"ElectricTariff\": {\n        \"urdb_label\": \"5ed6c1a15457a3367add15ae\"\n    }\n}","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"The order of the keys do not matter. Note that this scenario does not include any energy generation technologies and therefore the results can be used as a baseline for comparison to scenarios that result in cost-optimal generation technologies.","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"To add PV to the analysis simply add a PV key with an empty dictionary (to use default values):","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"{\n    \"Site\": {\n        \"longitude\": -118.1164613,\n        \"latitude\": 34.5794343\n    },\n    \"ElectricLoad\": {\n        \"doe_reference_name\": \"MidriseApartment\",\n        \"annual_kwh\": 1000000.0,\n        \"city\": \"Boulder\"\n    },\n    \"ElectricTariff\": {\n        \"urdb_label\": \"5ed6c1a15457a3367add15ae\"\n    },\n    \"PV\": {}\n}","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"This scenario will consider the option to purchase a solar PV system to reduce energy costs, and if solar PV can reduce the energy costs then REopt Lite will provide the optimal PV capacity (assuming perfect foresight!). To use other than default values for PV see the PV struct definition.  For example, the site under consideration might have some existing PV capacity to account for, which can be done by setting the existing_kw key to the appropriate value.","category":"page"},{"location":"reopt/inputs/#Scenario","page":"REopt Inputs","title":"Scenario","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"The Scenario struct captures all of the objects that can be included in a scenario.json:","category":"page"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"Scenario","category":"page"},{"location":"reopt/inputs/#REoptLite.Scenario","page":"REopt Inputs","title":"REoptLite.Scenario","text":"Scenario(d::Dict)\n\nConstructor for Scenario struct, where d has upper-case keys:\n\nSite (required)\nElectricTariff (required)\nElectricLoad (required)\nPV (optional, can be Array)\nStorage (optional)\nElectricUtility (optional)\nFinancial (optional)\nGenerator (optional)\n\nAll values of d are expected to be Dicts except for PV, which can be either a Dict or Dict[].\n\nstruct Scenario\n    settings::Settings\n    site::Site\n    pvs::Array{PV, 1}\n    storage::Storage\n    electric_tariff::ElectricTariff\n    electric_load::ElectricLoad\n    electric_utility::ElectricUtility\n    financial::Financial\n    generator::Generator\nend\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#REoptInputs","page":"REopt Inputs","title":"REoptInputs","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REoptLite.REoptInputs","category":"page"},{"location":"reopt/inputs/#REoptLite.REoptInputs","page":"REopt Inputs","title":"REoptLite.REoptInputs","text":"REoptInputs(fp::String)\n\nUse fp to load in JSON scenario:\n\nfunction REoptInputs(fp::String)\n    s = Scenario(JSON.parsefile(fp))\n    REoptInputs(s)\nend\n\nUseful if you want to manually modify REoptInputs before solving the model.\n\n\n\n\n\nREoptInputs(s::Scenario)\n\nConstructor for REoptInputs\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#ElectricLoad","page":"REopt Inputs","title":"ElectricLoad","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REoptLite.ElectricLoad","category":"page"},{"location":"reopt/inputs/#REoptLite.ElectricLoad","page":"REopt Inputs","title":"REoptLite.ElectricLoad","text":"ElectricLoad(;\n    loads_kw::Union{Missing, Array{<:Real,1}} = missing,\n    year::Int = 2020,\n    doe_reference_name::Union{Missing, String} = missing,\n    city::Union{Missing, String} = missing,\n    annual_kwh::Union{Real, Nothing} = nothing,\n    monthly_totals_kwh::Array{<:Real,1} = Real[],\n    critical_loads_kw::Union{Missing, Array{Real,1}} = missing,\n    loads_kw_is_net::Bool = true,\n    critical_loads_kw_is_net::Bool = false,\n    critical_load_pct::Real = 0.5\n)\n\nMust provide either loads_kw or [doe_reference_name and city] or doe_reference_name. \n\nWhen only doe_reference_name is provided the Site.latitude and Site.longitude are used to look up the ASHRAE climate zone, which determines the appropriate DoE Commercial Reference Building profile.\n\nWhen using the [doe_reference_name and city] option, choose city from one of the  cities used to represent the ASHRAE climate zones:\n\nAlbuquerque\nAtlanta\nBaltimore\nBoulder\nChicago\nDuluth\nFairbanks\nHelena\nHouston\nLosAngeles\nMiami\nMinneapolis\nPhoenix\nSanFrancisco\nSeattle\n\nand doe_reference_name from:\n\nFastFoodRest\nFullServiceRest\nHospital\nLargeHotel\nLargeOffice\nMediumOffice\nMidriseApartment\nOutpatient\nPrimarySchool\nRetailStore\nSecondarySchool\nSmallHotel\nSmallOffice\nStripMall\nSupermarket\nWarehouse\nFlatLoad\n\nEach city and doe_reference_name combination has a default annual_kwh, or you can provide your own annual_kwh or monthly_totals_kwh and the reference profile will be scaled appropriately.\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#Financial-values","page":"REopt Inputs","title":"Financial values","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REoptLite.Financial","category":"page"},{"location":"reopt/inputs/#REoptLite.Financial","page":"REopt Inputs","title":"REoptLite.Financial","text":"Financial\n\nFinancial data struct with inner constructor:\n\nfunction Financial(;\n    om_cost_escalation_pct::Float64 = 0.025,\n    elec_cost_escalation_pct::Float64 = 0.023,\n    offtaker_tax_pct::Float64 = 0.26,\n    offtaker_discount_pct = 0.083,\n    third_party_ownership::Bool = false,\n    owner_tax_pct::Float64 = 0.26,\n    owner_discount_pct::Float64 = 0.083,\n    analysis_years::Int = 25,\n    VoLL::Union{Array{R,1}, R} where R<:Real = 1.00,\n    microgrid_premium_pct::Float64 = 0.3,\n    macrs_five_year::Array{Float64,1} = [0.2, 0.32, 0.192, 0.1152, 0.1152, 0.0576],  # IRS pub 946\n    macrs_seven_year::Array{Float64,1} = [0.1429, 0.2449, 0.1749, 0.1249, 0.0893, 0.0892, 0.0893, 0.0446]\n)\n\nnote: Note\nWhen third_party_ownership is false the offtaker's discount and tax percentages are used throughout the model:    if !third_party_ownership\n        owner_tax_pct = offtaker_tax_pct\n        owner_discount_pct = offtaker_discount_pct\n    end\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#ElectricUtility","page":"REopt Inputs","title":"ElectricUtility","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REoptLite.ElectricUtility","category":"page"},{"location":"reopt/inputs/#REoptLite.ElectricUtility","page":"REopt Inputs","title":"REoptLite.ElectricUtility","text":"ElectricUtility\n\nBase.@kwdef struct ElectricUtility\n    outage_start_timestep::Int=0  # for modeling a single outage, with critical load spliced into the baseline load ...\n    outage_end_timestep::Int=0  # ... utiltity production_factor = 0 during the outage\n    allow_simultaneous_export_import::Bool=true  # if true the site has two meters (in effect)\n    # variables below used for minimax the expected outage cost,\n    # with max taken over outage start time, expectation taken over outage duration\n    outage_start_timesteps::Array{Int,1}=Int[]  # we minimize the maximum outage cost over outage start times\n    outage_durations::Array{Int,1}=Int[]  # one-to-one with outage_probabilities, outage_durations can be a random variable\n    outage_probabilities::Array{Real,1}=[1.0]\n    outage_timesteps::Union{Missing, UnitRange} = isempty(outage_durations) ? missing : 1:maximum(outage_durations)\n    scenarios::Union{Missing, UnitRange} = isempty(outage_durations) ? missing : 1:length(outage_durations)\nend\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#PV","page":"REopt Inputs","title":"PV","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REoptLite.PV","category":"page"},{"location":"reopt/inputs/#REoptLite.PV","page":"REopt Inputs","title":"REoptLite.PV","text":"PV\n\nstruct with inner constructor:\n\nfunction PV(;\n    tilt::Real,\n    array_type::Int=1,\n    module_type::Int=0,\n    losses::Real=0.14,\n    azimuth::Real=180,\n    gcr::Real=0.4,\n    radius::Int=0,\n    name::String=\"PV\",\n    location::String=\"both\",\n    existing_kw::Real=0,\n    min_kw::Real=0,\n    max_kw::Real=1.0e9,\n    installed_cost_per_kw::Real=1600.0,\n    om_cost_per_kw::Real=16.0,\n    degradation_pct::Real=0.005,\n    macrs_option_years::Int = 5,\n    macrs_bonus_pct::Float64 = 1.0,\n    macrs_itc_reduction::Float64 = 0.5,\n    kw_per_square_foot::Float64=0.01,\n    acres_per_kw::Float64=6e-3,\n    inv_eff::Float64=0.96,\n    dc_ac_ratio::Float64=1.2,\n    prod_factor_series_kw::Union{Missing, Array{Real,1}} = missing,\n    federal_itc_pct::Float64 = 0.26,\n    federal_rebate_per_kw::Float64 = 0.0,\n    state_ibi_pct::Float64 = 0.0,\n    state_ibi_max::Float64 = 1.0e10,\n    state_rebate_per_kw::Float64 = 0.0,\n    state_rebate_max::Float64 = 1.0e10,\n    utility_ibi_pct::Float64 = 0.0,\n    utility_ibi_max::Float64 = 1.0e10,\n    utility_rebate_per_kw::Float64 = 0.0,\n    utility_rebate_max::Float64 = 1.0e10,\n    production_incentive_per_kwh::Float64 = 0.0,\n    production_incentive_max_benefit::Float64 = 1.0e9,\n    production_incentive_years::Float64 = 1.0,\n    production_incentive_max_kw::Float64 = 1.0e9\n    can_net_meter::Bool = true,\n    can_wholesale::Bool = true,\n    can_export_beyond_nem_limit::Bool = true\n)\n\nnote: Note\nIf tilt is not provided then it is set to the Site.latitude. (Which is handled in the Scenario struct.)\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#Wind","page":"REopt Inputs","title":"Wind","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REoptLite.Wind","category":"page"},{"location":"reopt/inputs/#REoptLite.Wind","page":"REopt Inputs","title":"REoptLite.Wind","text":"Wind\n\nstruct with inner constructor:\n\nfunction Wind(;\n    min_kw = 0.0,\n    max_kw = 1.0e9,\n    installed_cost_per_kw = 0.0,\n    om_cost_per_kw = 40.0,\n    prod_factor_series_kw = missing,\n    size_class = \"\",\n    wind_meters_per_sec = [],\n    wind_direction_degrees = [],\n    temperature_celsius = [],\n    pressure_atmospheres = [],\n    macrs_option_years = 5,\n    macrs_bonus_pct = 0.0,\n    macrs_itc_reduction = 0.5,\n    federal_itc_pct = 0.26,\n    federal_rebate_per_kw = 0.0,\n    state_ibi_pct = 0.0,\n    state_ibi_max = 1.0e10,\n    state_rebate_per_kw = 0.0,\n    state_rebate_max = 1.0e10,\n    utility_ibi_pct = 0.0,\n    utility_ibi_max = 1.0e10,\n    utility_rebate_per_kw = 0.0,\n    utility_rebate_max = 1.0e10,\n    production_incentive_per_kwh = 0.0,\n    production_incentive_max_benefit = 1.0e9,\n    production_incentive_years = 1,\n    production_incentive_max_kw = 1.0e9,\n    can_net_meter = true,\n    can_wholesale = true,\n    can_export_beyond_nem_limit = true\n)\n\nsize_class must be one of [\"residential\", \"commercial\", \"medium\", \"large\"].\n\nIf no installed_cost_per_kw is provided (or it is 0.0) then it is determined from:\n\nsize_class_to_installed_cost = Dict(\n    \"residential\"=> 11950.0,\n    \"commercial\"=> 7390.0,\n    \"medium\"=> 4440.0,\n    \"large\"=> 3450.0\n)\n\nThe Federal Investment Tax Credit is adjusted based on the size_class as follows (if the default of 0.3 is not changed):\n\nsize_class_to_itc_incentives = Dict(\n    \"residential\"=> 0.3,\n    \"commercial\"=> 0.3,\n    \"medium\"=> 0.12,\n    \"large\"=> 0.12\n)\n\nIf the prod_factor_series_kw is not provided then NREL's System Advisor Model (SAM) is used to get the wind turbine  production factor.\n\nWind resource values are optional, i.e. (wind_meters_per_sec, wind_direction_degrees, temperature_celsius, and pressure_atmospheres). If not provided then the resource values are downloaded from NREL's Wind Toolkit. These values are passed to SAM to get the turbine production factor.\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#Generator","page":"REopt Inputs","title":"Generator","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REoptLite.Generator","category":"page"},{"location":"reopt/inputs/#REoptLite.Generator","page":"REopt Inputs","title":"REoptLite.Generator","text":"Generator\n\nstruct with inner constructor:\n\nfunction Generator(;\n    existing_kw::Real=0,\n    min_kw::Real=0,\n    max_kw::Real=1.0e6,\n    installed_cost_per_kw::Real=500.0,\n    om_cost_per_kw::Real=10.0,\n    om_cost_per_kwh::Float64=0.0,\n    fuel_cost_per_gallon::Float64 = 3.0,\n    fuel_slope_gal_per_kwh::Float64 = 0.076,\n    fuel_intercept_gal_per_hr::Float64 = 0.0,\n    fuel_avail_gal::Float64 = 660.0,\n    min_turn_down_pct::Float64 = 0.0,\n    only_runs_during_grid_outage::Bool = true,\n    sells_energy_back_to_grid::Bool = false,\n    can_net_meter::Bool = false,\n    can_wholesale::Bool = false,\n    can_export_beyond_nem_limit = false\n)\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#ElectricTariff","page":"REopt Inputs","title":"ElectricTariff","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REoptLite.ElectricTariff","category":"page"},{"location":"reopt/inputs/#REoptLite.ElectricTariff","page":"REopt Inputs","title":"REoptLite.ElectricTariff","text":"ElectricTariff\n\nElectricTariff constructor\n\nfunction ElectricTariff(;\n    urdb_label::String=\"\",\n    urdb_response::Dict=Dict(),\n    urdb_utility_name::String=\"\",\n    urdb_rate_name::String=\"\",\n    year::Int=2020,\n    time_steps_per_hour::Int=1,\n    NEM::Bool=false,\n    wholesale_rate::T=nothing, \n    monthly_energy_rates::Array=[],\n    monthly_demand_rates::Array=[],\n    blended_annual_energy_rate::S=nothing,\n    blended_annual_demand_rate::R=nothing,\n    ) where {\n        T <: Union{Nothing, Int, Float64, Array}, \n        S <: Union{Nothing, Int, Float64}, \n        R <: Union{Nothing, Int, Float64}\n    }\n\nnote: Note\nThe NEM boolean is determined by the ElectricUtility.netmeteringlimit_kw. There is no need to pass in a NEM value.\n\n\n\n\n\n","category":"type"},{"location":"reopt/inputs/#Settings","page":"REopt Inputs","title":"Settings","text":"","category":"section"},{"location":"reopt/inputs/","page":"REopt Inputs","title":"REopt Inputs","text":"REoptLite.Settings","category":"page"},{"location":"reopt/inputs/#REoptLite.Settings","page":"REopt Inputs","title":"REoptLite.Settings","text":"Settings\n\nData struct for top-level Scenario settings. Captures inputs that do not logically fall under any of the other data structs.\n\nBase.@kwdef struct Settings\n    time_steps_per_hour::Int = 1\nend\n\n\n\n\n\n","category":"type"}]
}
